import {
  Shoemaker,
  html
} from "./chunk.HODVHBF3.js";

// _ccwmwdlsd:/Users/claviska/Projects/shoelace/src/components/resize-observer/resize-observer.scss
var resize_observer_default = ":host {\n  position: relative;\n  box-sizing: border-box;\n}\n:host *, :host *:before, :host *:after {\n  box-sizing: inherit;\n}\n\n:host {\n  display: contents;\n}";

// src/components/resize-observer/resize-observer.ts
var SlResizeObserver = class extends Shoemaker {
  constructor() {
    super(...arguments);
    this.observedElements = [];
  }
  onReady() {
    this.resizeObserver = new ResizeObserver((entries) => this.emit("sl-resize", {detail: {entries}}));
  }
  onDisconnect() {
    this.resizeObserver.disconnect();
  }
  handleSlotChange() {
    const slot = this.shadowRoot.querySelector("slot");
    const elements = slot.assignedElements({flatten: true});
    this.observedElements.map((el) => this.resizeObserver.unobserve(el));
    this.observedElements = [];
    elements.map((el) => {
      this.resizeObserver.observe(el);
      this.observedElements.push(el);
    });
  }
  render() {
    return html` <slot onslotchange=${this.handleSlotChange.bind(this)} /> `;
  }
};
SlResizeObserver.tag = "sl-resize-observer";
SlResizeObserver.styles = resize_observer_default;
var resize_observer_default2 = SlResizeObserver;

export {
  resize_observer_default2 as resize_observer_default
};
