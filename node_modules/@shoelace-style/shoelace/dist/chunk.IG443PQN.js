import {
  getIconLibrary,
  unwatchIcon,
  watchIcon
} from "./chunk.AF62ZLUK.js";
import {
  requestIcon
} from "./chunk.7GTYP37T.js";
import {
  Shoemaker,
  html
} from "./chunk.HODVHBF3.js";

// _ccwmwdlsd:/Users/claviska/Projects/shoelace/src/components/icon/icon.scss
var icon_default = ":host {\n  position: relative;\n  box-sizing: border-box;\n}\n:host *, :host *:before, :host *:after {\n  box-sizing: inherit;\n}\n\n:host {\n  display: inline-block;\n  width: 1em;\n  height: 1em;\n  contain: strict;\n  box-sizing: content-box !important;\n}\n\n.icon,\nsvg {\n  display: block;\n  height: 100%;\n  width: 100%;\n}";

// src/components/icon/icon.ts
var parser = new DOMParser();
var SlIcon = class extends Shoemaker {
  constructor() {
    super(...arguments);
    this.library = "default";
  }
  onConnect() {
    watchIcon(this);
  }
  onReady() {
    this.setIcon();
  }
  onDisconnect() {
    unwatchIcon(this);
  }
  getLabel() {
    let label = "";
    if (this.label) {
      label = this.label;
    } else if (this.name) {
      label = this.name.replace(/-/g, " ");
    } else if (this.src) {
      label = this.src.replace(/.*\//, "").replace(/-/g, " ").replace(/\.svg/i, "");
    }
    return label;
  }
  redraw() {
    this.setIcon();
  }
  async setIcon() {
    const library = getIconLibrary(this.library);
    let url = this.src;
    if (this.name && library) {
      url = library.resolver(this.name);
    }
    if (url) {
      try {
        const file = await requestIcon(url);
        if (file.ok) {
          const doc = parser.parseFromString(file.svg, "text/html");
          const svgEl = doc.body.querySelector("svg");
          if (svgEl) {
            if (library && library.mutator) {
              library.mutator(svgEl);
            }
            this.svg = html([svgEl.outerHTML]);
            this.emit("sl-load");
          } else {
            this.svg = "";
            this.emit("sl-error", {detail: {status: file.status}});
          }
        } else {
          this.svg = "";
          this.emit("sl-error", {detail: {status: file.status}});
        }
      } catch (e) {
        this.emit("sl-error");
      }
    } else if (this.svg) {
      this.svg = "";
    }
  }
  watchName() {
    this.setIcon();
  }
  watchSrc() {
    this.setIcon();
  }
  watchLibrary() {
    this.setIcon();
  }
  handleChange() {
    this.setIcon();
  }
  render() {
    return html` <div part="base" class="icon" role="img" aria-label=${this.getLabel()}>${this.svg}</div>`;
  }
};
SlIcon.tag = "sl-icon";
SlIcon.props = ["svg", "name", "src", "label", "library"];
SlIcon.styles = icon_default;
var icon_default2 = SlIcon;

export {
  icon_default2 as icon_default
};
