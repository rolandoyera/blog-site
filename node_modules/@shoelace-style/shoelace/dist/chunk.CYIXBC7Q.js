import {
  clamp
} from "./chunk.S6SAZ7RG.js";
import {
  styleMap
} from "./chunk.IA2H52LP.js";
import {
  Shoemaker,
  html
} from "./chunk.HODVHBF3.js";

// _ccwmwdlsd:/Users/claviska/Projects/shoelace/src/components/image-comparer/image-comparer.scss
var image_comparer_default = ":host {\n  position: relative;\n  box-sizing: border-box;\n}\n:host *, :host *:before, :host *:after {\n  box-sizing: inherit;\n}\n\n/**\n * @prop --divider-width: The width of the dividing line.\n * @prop --handle-size: The size of the compare handle.\n */\n:host {\n  --divider-width: 2px;\n  --handle-size: 2.5rem;\n  display: inline-block;\n  position: relative;\n}\n\n.image-comparer {\n  max-width: 100%;\n  max-height: 100%;\n  overflow: hidden;\n}\n\n.image-comparer__before,\n.image-comparer__after {\n  pointer-events: none;\n}\n.image-comparer__before ::slotted(img),\n.image-comparer__before ::slotted(svg),\n.image-comparer__after ::slotted(img),\n.image-comparer__after ::slotted(svg) {\n  display: block;\n  max-width: 100% !important;\n  height: auto;\n}\n\n.image-comparer__after {\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 100%;\n}\n\n.image-comparer__divider {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  width: var(--divider-width);\n  height: 100%;\n  background-color: var(--sl-color-white);\n  transform: translateX(calc(var(--divider-width) / -2));\n  cursor: ew-resize;\n}\n\n.image-comparer__handle {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  top: calc(50% - (var(--handle-size) / 2));\n  width: var(--handle-size);\n  height: var(--handle-size);\n  background-color: var(--sl-color-white);\n  border-radius: var(--sl-border-radius-circle);\n  font-size: calc(var(--handle-size) * 0.5);\n  color: var(--sl-color-gray-500);\n  cursor: inherit;\n  z-index: 10;\n}\n.image-comparer__handle:focus {\n  outline: none;\n  box-shadow: 0 0 0 1px var(--sl-color-primary-500), 0 0 0 var(--sl-focus-ring-width) var(--sl-focus-ring-color-primary);\n}";

// src/components/image-comparer/image-comparer.ts
var SlImageComparer = class extends Shoemaker {
  constructor() {
    super(...arguments);
    this.position = 50;
  }
  handleDrag(event) {
    const {width} = this.base.getBoundingClientRect();
    function drag(event2, container, onMove) {
      const move = (event3) => {
        const dims = container.getBoundingClientRect();
        const defaultView = container.ownerDocument.defaultView;
        const offsetX = dims.left + defaultView.pageXOffset;
        const offsetY = dims.top + defaultView.pageYOffset;
        const x = (event3.changedTouches ? event3.changedTouches[0].pageX : event3.pageX) - offsetX;
        const y = (event3.changedTouches ? event3.changedTouches[0].pageY : event3.pageY) - offsetY;
        onMove(x, y);
      };
      move(event2);
      const stop = () => {
        document.removeEventListener("mousemove", move);
        document.removeEventListener("touchmove", move);
        document.removeEventListener("mouseup", stop);
        document.removeEventListener("touchend", stop);
      };
      document.addEventListener("mousemove", move);
      document.addEventListener("touchmove", move);
      document.addEventListener("mouseup", stop);
      document.addEventListener("touchend", stop);
    }
    this.handle.focus();
    event.preventDefault();
    drag(event, this.base, (x) => {
      this.position = clamp(x / width * 100, 0, 100);
    });
  }
  handleKeyDown(event) {
    if (["ArrowLeft", "ArrowRight", "Home", "End"].includes(event.key)) {
      const incr = event.shiftKey ? 10 : 1;
      let newPosition = this.position;
      event.preventDefault();
      if (event.key === "ArrowLeft")
        newPosition = newPosition - incr;
      if (event.key === "ArrowRight")
        newPosition = newPosition + incr;
      if (event.key === "Home")
        newPosition = 0;
      if (event.key === "End")
        newPosition = 100;
      newPosition = clamp(newPosition, 0, 100);
      this.position = newPosition;
    }
  }
  watchPosition() {
    this.emit("sl-change");
  }
  render() {
    return html`
      <div
        ref=${(el) => this.base = el}
        part="base"
        class="image-comparer"
        onkeydown=${this.handleKeyDown.bind(this)}
      >
        <div class="image-comparer__image">
          <div part="before" class="image-comparer__before">
            <slot name="before" />
          </div>

          <div
            part="after"
            class="image-comparer__after"
            style="${styleMap({clipPath: `inset(0 ${100 - this.position}% 0 0)`})}"
          >
            <slot name="after" />
          </div>
        </div>

        <div
          part="divider"
          class="image-comparer__divider"
          style="${styleMap({left: this.position + "%"})}"
          onmousedown=${this.handleDrag.bind(this)}
          ontouchstart=${this.handleDrag.bind(this)}
        >
          <div
            ref=${(el) => this.handle = el}
            part="handle"
            class="image-comparer__handle"
            role="scrollbar"
            aria-valuenow="${this.position}"
            aria-valuemin="0"
            aria-valuemax="100"
            tabindex="0"
          >
            <slot name="handle-icon">
              <sl-icon class="image-comparer__handle-icon" name="grip-vertical" />
            </slot>
          </div>
        </div>
      </div>
    `;
  }
};
SlImageComparer.tag = "sl-image-comparer";
SlImageComparer.props = ["position"];
SlImageComparer.styles = image_comparer_default;
var image_comparer_default2 = SlImageComparer;

export {
  image_comparer_default2 as image_comparer_default
};
