import {
  isPreventScrollSupported,
  lockBodyScrolling,
  modal_default,
  unlockBodyScrolling
} from "./chunk.5LDML7H2.js";
import {
  hasSlot
} from "./chunk.PCLPGKVT.js";
import {
  classMap
} from "./chunk.IJFXZJ6H.js";
import {
  Shoemaker,
  html
} from "./chunk.HODVHBF3.js";

// _ccwmwdlsd:/Users/claviska/Projects/shoelace/src/components/dialog/dialog.scss
var dialog_default = ":host {\n  position: relative;\n  box-sizing: border-box;\n}\n:host *, :host *:before, :host *:after {\n  box-sizing: inherit;\n}\n\n/**\n * @prop --width: The preferred width of the dialog. Note that the dialog will shrink to accommodate smaller screens.\n */\n:host {\n  --width: 31rem;\n  display: contents;\n}\n\n.dialog {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: var(--sl-z-index-dialog);\n}\n.dialog:not(.dialog--visible) {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  clip: rect(0 0 0 0);\n  clip-path: inset(50%);\n  overflow: hidden;\n  pointer-events: none;\n  visibility: hidden;\n}\n\n.dialog__panel {\n  display: flex;\n  flex-direction: column;\n  z-index: 2;\n  width: var(--width);\n  max-width: calc(100% - var(--sl-spacing-xx-large));\n  max-height: calc(100% - var(--sl-spacing-xx-large));\n  background-color: var(--sl-panel-background-color);\n  border-radius: var(--sl-border-radius-medium);\n  box-shadow: var(--sl-shadow-x-large);\n  opacity: 0;\n  transform: scale(0.8);\n  transition: var(--sl-transition-medium) opacity, var(--sl-transition-medium) transform;\n}\n.dialog__panel:focus {\n  outline: none;\n}\n\n@media screen and (max-width: 420px) {\n  .dialog__panel {\n    max-height: 80vh;\n  }\n}\n.dialog--open .dialog__panel {\n  display: flex;\n  opacity: 1;\n  transform: none;\n}\n\n.dialog__header {\n  flex: 0 0 auto;\n  display: flex;\n}\n\n.dialog__title {\n  flex: 1 1 auto;\n  font-size: var(--sl-font-size-large);\n  line-height: var(--sl-line-height-dense);\n  padding: var(--sl-spacing-large);\n}\n\n.dialog__close {\n  flex: 0 0 auto;\n  display: flex;\n  align-items: center;\n  font-size: var(--sl-font-size-x-large);\n  padding: 0 var(--sl-spacing-large);\n}\n\n.dialog__body {\n  flex: 1 1 auto;\n  padding: var(--sl-spacing-large);\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;\n}\n\n.dialog__footer {\n  flex: 0 0 auto;\n  text-align: right;\n  padding: var(--sl-spacing-large);\n}\n.dialog__footer ::slotted(sl-button:not(:first-of-type)) {\n  margin-left: var(--sl-spacing-x-small);\n}\n\n.dialog:not(.dialog--has-footer) .dialog__footer {\n  display: none;\n}\n\n.dialog__overlay {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  background-color: var(--sl-overlay-background-color);\n  opacity: 0;\n  transition: var(--sl-transition-medium) opacity;\n}\n\n.dialog--open .dialog__overlay {\n  opacity: 1;\n}";

// src/components/dialog/dialog.ts
var hasPreventScroll = isPreventScrollSupported();
var id = 0;
var SlDialog = class extends Shoemaker {
  constructor() {
    super(...arguments);
    this.componentId = `dialog-${++id}`;
    this.hasFooter = false;
    this.isVisible = false;
    this.willShow = false;
    this.willHide = false;
    this.open = false;
    this.label = "";
    this.noHeader = false;
  }
  onConnect() {
    this.modal = new modal_default(this, {
      onfocusOut: () => this.panel.focus()
    });
    this.handleSlotChange();
    if (this.open) {
      this.show();
    }
  }
  onDisconnect() {
    unlockBodyScrolling(this);
  }
  show() {
    if (this.willShow) {
      return;
    }
    const slShow = this.emit("sl-show");
    if (slShow.defaultPrevented) {
      this.open = false;
      return;
    }
    this.willShow = true;
    this.isVisible = true;
    this.open = true;
    this.modal.activate();
    lockBodyScrolling(this);
    if (this.open) {
      if (hasPreventScroll) {
        requestAnimationFrame(() => {
          const slInitialFocus = this.emit("sl-initial-focus");
          if (!slInitialFocus.defaultPrevented) {
            this.panel.focus({preventScroll: true});
          }
        });
      } else {
        this.dialog.addEventListener("transitionend", () => {
          const slInitialFocus = this.emit("sl-initial-focus");
          if (!slInitialFocus.defaultPrevented) {
            this.panel.focus();
          }
        }, {once: true});
      }
    }
  }
  hide() {
    if (this.willHide) {
      return;
    }
    const slHide = this.emit("sl-hide");
    if (slHide.defaultPrevented) {
      this.open = true;
      return;
    }
    this.willHide = true;
    this.open = false;
    this.modal.deactivate();
    unlockBodyScrolling(this);
  }
  handleCloseClick() {
    this.hide();
  }
  handleKeyDown(event) {
    if (event.key === "Escape") {
      this.hide();
    }
  }
  handleOverlayClick() {
    const slOverlayDismiss = this.emit("sl-overlay-dismiss");
    if (!slOverlayDismiss.defaultPrevented) {
      this.hide();
    }
  }
  handleSlotChange() {
    this.hasFooter = hasSlot(this, "footer");
  }
  handleTransitionEnd(event) {
    const target = event.target;
    if (event.propertyName === "opacity" && target.classList.contains("dialog__panel")) {
      this.isVisible = this.open;
      this.willShow = false;
      this.willHide = false;
      this.open ? this.emit("sl-after-show") : this.emit("sl-after-hide");
    }
  }
  watchOpen() {
    this.open ? this.show() : this.hide();
  }
  render() {
    return html`
      <div
        ref=${(el) => this.dialog = el}
        part="base"
        class=${classMap({
      dialog: true,
      "dialog--open": this.open,
      "dialog--visible": this.isVisible,
      "dialog--has-footer": this.hasFooter
    })}
        onkeydown=${this.handleKeyDown.bind(this)}
        ontransitionend=${this.handleTransitionEnd.bind(this)}
      >
        <div part="overlay" class="dialog__overlay" onclick=${this.handleOverlayClick.bind(this)} tabindex="-1" />

        <div
          ref=${(el) => this.panel = el}
          part="panel"
          class="dialog__panel"
          role="dialog"
          aria-modal="true"
          aria-hidden=${this.open ? "false" : "true"}
          aria-label=${this.noHeader ? this.label : null}
          aria-labelledby=${!this.noHeader ? `${this.componentId}-title` : null}
          tabindex="0"
        >
          ${!this.noHeader ? html`
                <header part="header" class="dialog__header">
                  <span part="title" class="dialog__title" id=${`${this.componentId}-title`}>
                    <slot name="label"> ${this.label || String.fromCharCode(65279)} </slot>
                  </span>
                  <sl-icon-button
                    exportparts="base:close-button"
                    class="dialog__close"
                    name="x"
                    onclick="${this.handleCloseClick.bind(this)}"
                  />
                </header>
              ` : ""}

          <div part="body" class="dialog__body">
            <slot />
          </div>

          <footer part="footer" class="dialog__footer">
            <slot name="footer" onslotchange=${this.handleSlotChange.bind(this)} />
          </footer>
        </div>
      </div>
    `;
  }
};
SlDialog.tag = "sl-dialog";
SlDialog.props = ["hasFooter", "isVisible", "open", "label", "noHeader"];
SlDialog.reflect = ["open"];
SlDialog.styles = dialog_default;
var dialog_default2 = SlDialog;

export {
  dialog_default2 as dialog_default
};
