import { Hole } from 'uhtml';
declare function classMap(classes: any): string;
declare function styleMap(styles: {
    [key: string]: any;
}): string;
declare abstract class Shoemaker extends HTMLElement {
    static tag: string;
    static props: string[];
    static reflect: string[];
    static styles: string;
    static get observedAttributes(): string[];
    private _initialProps;
    private _isInitialized;
    private _isMounted;
    private _isRenderScheduled;
    private _props;
    constructor();
    connectedCallback(): void;
    disconnectedCallback(): void;
    attributeChangedCallback(attrName: string, oldValue: string | null, newValue: string | null): void;
    private _reflectToAttr;
    private _triggerWatcher;
    private _renderToDOM;
    /** Called after the component has been connected to the DOM and before the initial render. At this point, the
     * component's internals are not available in the DOM. This is a good place to fetch data and override initial props.
     */
    /** Called after the component has been connected to the DOM and before the initial render. At this point, the
     * component's internals are not available in the DOM. This is a good place to fetch data and override initial props.
     */
    onConnect(): void;
    /** Called after the component has initialized and the first render has occurred. */
    /** Called after the component has initialized and the first render has occurred. */
    onReady(): void;
    /** Called when the component is removed from the DOM. */
    /** Called when the component is removed from the DOM. */
    onDisconnect(): void;
    /** Renders the component. */
    /** Renders the component. */
    render(): Hole | string | undefined;
    /**
     * Schedules a render. This is called automatically when props change, but you can force a re-render by calling it
     * arbitrarily. It's almost always a bad practice to rely on this method. Try to use props instead.
     */
    /**
     * Schedules a render. This is called automatically when props change, but you can force a re-render by calling it
     * arbitrarily. It's almost always a bad practice to rely on this method. Try to use props instead.
     */
    scheduleRender(): Promise<unknown>;
    /** Dispatches a custom event from the host element. */
    /** Dispatches a custom event from the host element. */
    emit(eventName: string, eventOptions?: CustomEventInit): CustomEvent<any>;
    /** Registers the component as a custom element. */
    /** Registers the component as a custom element. */
    static register(): void;
}
export { classMap, styleMap, Shoemaker };
export { html, svg, Hole } from 'uhtml';
